version: "3.8"

services:
  cms_frontend:
    container_name: cms_frontend
    build: 
      context: ./Cms_frontend
      args: 
        BACKEND_URI: ${BACKEND_URI}
    volumes:
      # Note must include node_modules as a seperate volume
      - '/app/node_modules'
      - './Cms_frontend:/app'
    stdin_open: true
    ports:
      - 3000:3000


  backend:
    container_name: go_backend
    build: ./Backend
    depends_on:
      - db
    volumes:
      - './Backend:/go/src/DiffSync'
      - './Backend/go.mod:/go/src/DiffSync/go.mod'
    ports:
      - 8080:8080
    environment:
      - FRONTEND_URI=${FRONTEND_URI}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DB}

  db:
    container_name: pg_container
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
    ports:
      - "5432:5432"
    volumes:
      - './Postgres/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql'
      - 'pg_data:/var/lib/postgresql/data'
      
  staging_db:
    container_name: pg_container_testing
    image: postgres
    restart: always
    user: postgres
    environment:
      POSTGRES_PASSWORD: test
      POSTGRES_DB: cms_testing_db
    ports:
      - "1234:5432"
    volumes:
      - './Postgres/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql'
      - 'staging_data:/var/lib/postgresql/data'
volumes:
  pg_data:
  staging_data: